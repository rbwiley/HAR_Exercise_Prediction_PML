rm(d2)
rm(y)
rm(x)
rm(logUseWind)
rm(logUseWind2)
rm(outp)
train =  createDataPartition(y=spam$type, p=0.75, list=FALSE)
library("caret", lib.loc="~/R/win-library/3.1")
train =  createDataPartition(y=spam$type, p=0.75, list=FALSE)
training = spam[inTrain,]
training = spam[Train,]
training = spam[train,]
testing = spam[-train,]
dim(training)
dim(testing)
set.seed(10001)
modelfit = train(type ~ ., data=training,method="glm")
install.packages("e1071")
library("e1071", lib.loc="~/R/win-library/3.1")
modelfit = train(type ~ ., data=training,method="glm")
modelfit
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(predictors)
adData1 = data.frame(diagnosis, predictors)
rm(adData1)
trainIndex = createDataPartition(diagnosis,p=0.5, list=FALSE)
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
dim(training)
dim(training); dim(testing)
str(adData)
str(predictors, 10)
modelFit = train(diagnosis ~ ., data = training, method="glm")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
dim(diagnosis)
str(diagnosis)
head(diagnosis)
head(diagnosis, 335)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
adData = data.frame(predictors)
trainIndex = createDataPartition(diagnosis,p=0.5,list=FALSE)
training = adData[trainIndex, ]
testing = adData[-trainIndex, ]
dim(training); dim(testing)
modelFit = train(diagnosis ~ ., data = training, method="glm")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50,list=FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training); dim(testing)
modelFit = train(diagnosis ~ ., data = training, method="glm")
plot(modelFit)
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
trainIndex = createDataPartition(diagnosis, p = 0.50, list = FALSE)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training); dim(testing)
modelFit = train(diagnosis ~ ., data = training, method="glm")
training = adData[trainIndex,]
testing = adData[-trainIndex,]
dim(training); dim(testing)
modelFit = train(diagnosis ~ ., data = training, method="glm")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library("data.table", lib.loc="~/R/win-library/3.1")
library("dplyr", lib.loc="~/R/win-library/3.1")
histogram(training)
histogram(training$Superplasticizer)
summary(training$Superplasticizer)
histogram(training$Superplasticizer, xlab="Superplasticizer")
preProcOut <- preProcess(training[,-5],method=c("center","scale"))
str(preProcOut)
trainSuperplast <- predict(preProcOut,training[,-9])$Superplasticizer
par(mfrow=c(1,2)); hist(trainSuperplast); qqnorm(trainSuperplast)
summary(training$Superplasticizer)
preProcOut <- preProcess(training[,-9],method=c("center","scale"))
trainSuperplast <- predict(preProcOut,training[,-9])$Superplasticizer
par(mfrow=c(1,2)); hist(trainSuperplast); qqnorm(trainSuperplast)
tranSuperplast <- preProcess(training[,-9],method=c("BoxCox"))
par(mfrow=c(1,2)); hist(trainSuperplast); qqnorm(trainSuperplast)
par(mfrow=c(1,2)); hist(tranSuperplast); qqnorm(tranSuperplast)
preProcOut
tranSuperplast
LogSuperplast <- preProcess(training[,-9],method=c("Log"))
LogSuperplast <- transform(training$Superplasticizer,method=c("Log"))
LogSuperplast
par(mfrow=c(1,2)); hist(LogSuperplast); qqnorm(LogSuperplast)
hist(LogSuperplast)
par(mfrow=c(1,2)); hist(LogSuperplast$X_data); qqnorm(LogSuperplast$X_data)
summary(LogSuperplast)
summary(training$Superplasticizer)
LogTranSuperplast <- log(training$Superplasticizer)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
prComp <- prcomp(training)
ILadData <- training[,c("IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3",
"IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7", "IL_8")]
prComp <- prcomp(ILadData)
plot(prComp$x[,1], prComp$x[,2])
prComp
str(prComp)
prProcIL <- preProcess(ILadData, mmethod = "pca")
prProcIL <- preProcess(ILadData + 1, mmethod = "pca")
plot(prProcIL$x[,1], prProcIL$x[,2])
prComp
prProcIL <- preProcess(log10(ILadData + 1), method = "pca", pcaComp = 2)
plot(prProcIL$x[,1], prProcIL$x[,2])
str(prProcIL)
trainPC <- predict((prProcIL, log10(training+1)))
trainPC <- predict((prProcIL, log10(ILadData+1)))
prProcIL <- preProcess(log10(ILadData), method = "pca", pcaComp = 2)
trainPC <- predict((prProcIL, log10(ILadData+1)))
trainPC <- predict(prProcIL, log10(ILadData+1))
View(ILadData)
modelFit <- train(ILadData$IL_17E ~ ., method = "glm", data = ILadData)
modelFit
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
histogram(training$Superplasticizer, xlab="Superplasticizer")
tranSuperplast <- preProcess(training[,-9],method=c("BoxCox"))
tranSuperplast
par(mfrow=c(1,2)); hist(tranSuperplast); qqnorm(tranSuperplast)
qqnorm(tranSuperplast)
hist(tranSuperplast)
histogram(training$Superplasticizer, xlab="Superplasticizer")
plot(training$Superplasticizer, training$CompressiveStrength)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
str(training)
ILadData <- training[,c("diagnosis", "IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3",
"IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7", "IL_8")]
pairs(ILadData)
prProcIL <- preProcess(log10(ILadData)+1, method = "pca", pcaComp = 2)
prProcIL <- preProcess(log10(ILadData[,-1])+1, method = "pca", pcaComp = 2)
rm(prProcIL)
prProcIL <- preProcess(log10(ILadData[,-1])+1, method = "pca", pcaComp = 2)
prComp <- prcomp(ILadData)
prComp <- prcomp(ILadData[,-1])
plot(prComp$x[,1], prComp$x[,2])
plot(prComp$x[,1], prComp$x[,3])
plot(prComp$x[,1], prComp$x[,4])
plot(prComp$x[,1], prComp$x[,5])
plot(prComp$x[,1], prComp$x[,6])
plot(prComp$x[,1], prComp$x[,7])
prComp$rotation
typeColor <- ((ILadData$diagnosis == "Impaired") * 1 + 1)
prComp <- prcomp(log10(ILadData[,-1]+1))
prComp <- prcomp(log10(ILadData[,-1]+1))
plot(prComp$x[,1], prComp$x[,2], typeColor, xlab = "PC1",ylab = "PC2")
plot(prComp$x[,1], prComp$x[,3])
plot(prComp$x[,1], prComp$x[,2], col = typeColor, xlab = "PC1",ylab = "PC2")
plot(prComp$x[,1], prComp$x[,3], col = typeColor, xlab = "PC1",ylab = "PC3")
plot(prComp$x[,1], prComp$x[,5], col = typeColor, xlab = "PC1",ylab = "PC5")
plot(prComp$x[,1], prComp$x[,6], col = typeColor, xlab = "PC1",ylab = "PC6")
plot(prComp$x[,1], prComp$x[,7], col = typeColor, xlab = "PC1",ylab = "PC7")
prComp$rotation
prProcIL <- preProcess(log10(ILadData[,-1])+1, method = "pca", pcaComp = 2)
trainPC <- predict(prProcIL, log10(ILadData+1)-1)
prProcIL <- preProcess(log10(ILadData[,-1])+1, method = "pca", pcaComp = 2)
plot(prComp$x[,1], prComp$x[,8], col = typeColor, xlab = "PC1",ylab = "PC8")
plot(prComp$x[,1], prComp$x[,9], col = typeColor, xlab = "PC1",ylab = "PC9")
plot(prComp$x[,1], prComp$x[,10], col = typeColor, xlab = "PC1",ylab = "PC10")
plot(prComp$x[,1], prComp$x[,11], col = typeColor, xlab = "PC1",ylab = "PC11")
plot(prComp$x[,1], prComp$x[,12], col = typeColor, xlab = "PC1",ylab = "PC12")
prComp$rotation
prProcIL <- preProcess(log10(ILadData[,-1])+1, method = "pca", pcaComp = 2)
prProcIL <- preProcess(ILadData[,-1])+1, method = "pca", pcaComp = 2)
prProcIL <- preProcess(ILadData[,-1])+1, method = "pca", pcaComp = 2)
prProcIL <- preProcess(ILadData[,-1]), method = "pca", pcaComp = 2)
prProcIL <- preProcess((ILadData[,-1]), method = "pca", pcaComp = 2)
trainPC <- predict(prProcIL, (ILadData[,-1]))
modelFit <- train(ILadData$diagnosis ~ ., method = "glm", data = ILadData)
modelFit
plot(prProcIL$x[,1], prProcIL$x[,2])
str(prProcIL)
modelFitplot(prProcIL$x[,1], prProcIL$x[,2])
plot(modelFit)
plot(prProcIL$x[,1], prProcIL$x[,2])
str(prProcIL)
prCompnoLog <- prcomp((ILadData[,-1]))
prCompnoLog$rotation
plot(prCompnoLog$x[,1], prCompnoLog$x[,2], col = typeColor, xlab = "PC1",ylab = "PC2")
plot(prCompnoLog$x[,1], prCompnoLog$x[,3], col = typeColor, xlab = "PC1",ylab = "PC3")
plot(prCompnoLog$x[,1], prCompnoLog$x[,4], col = typeColor, xlab = "PC1",ylab = "PC4")
plot(prCompnoLog$x[,1], prCompnoLog$x[,5], col = typeColor, xlab = "PC1",ylab = "PC5")
plot(prCompnoLog$x[,1], prCompnoLog$x[,6], col = typeColor, xlab = "PC1",ylab = "PC6")
plot(prCompnoLog$x[,1], prCompnoLog$x[,7], col = typeColor, xlab = "PC1",ylab = "PC7")
plot(prCompnoLog$x[,1], prCompnoLog$x[,8], col = typeColor, xlab = "PC1",ylab = "PC8")
plot(prCompnoLog$x[,1], prCompnoLog$x[,9], col = typeColor, xlab = "PC1",ylab = "PC9")
plot(prCompnoLog$x[,1], prCompnoLog$x[,10], col = typeColor, xlab = "PC1",ylab = "PC10")
plot(prCompnoLog$x[,1], prCompnoLog$x[,11], col = typeColor, xlab = "PC1",ylab = "PC11")
plot(prCompnoLog$x[,1], prCompnoLog$x[,12], col = typeColor, xlab = "PC1",ylab = "PC12")
hist(prCompnoLog$x[,1], prCompnoLog$x[,2], col = typeColor, xlab = "PC1",ylab = "PC2")
hist(prCompnoLog$x[,1], prCompnoLog$x[,3], col = typeColor, xlab = "PC1",ylab = "PC3")
hist(prCompnoLog$x[,1], prCompnoLog$x[,4], col = typeColor, xlab = "PC1",ylab = "PC4")
hist(prCompnoLog$x[,1])
hist(prCompnoLog$x[,1], prCompnoLog$x[,2])
hist(prCompnoLog$x[,1]); hist(prCompnoLog$x[,2])
hist(prCompnoLog$x[,3]); hist(prCompnoLog$x[,4])
hist(prCompnoLog$x[,7]); hist(prCompnoLog$x[,8])
hist(prCompnoLog$x[,9]); hist(prCompnoLog$x[,10])
hist(prCompnoLog$x[,11]); hist(prCompnoLog$x[,12])
str(prProcIL)
modelFit
prProcIL <- preProcess(log((ILadData[,-1]) +1, method = "pca", pcaComp = 2)
)
prProcIL <- preProcess(log((ILadData[,-1]) +1), method = "pca", pcaComp = 2)
trainPC <- predict(prProcIL, (ILadData[,-1]))
modelFit <- train(ILadData$diagnosis ~ ., method = "glm", data = ILadData)
plot(modelFit); plot(prProcIL$x[,1], prProcIL$x[,2])
str(prProcIL)
modelFit
trainPC <- predict(prProcIL, log((ILadData[,-1])+1))
modelFit <- train(ILadData$diagnosis ~ ., method = "glm", data = ILadData)
plot(modelFit); plot(prProcIL$x[,1], prProcIL$x[,2])
str(prProcIL)
modelFit
ILtrainPC <- predict(prProcIL, log((ILadData[,-1])+1))
modelFit <- train(ILadData$diagnosis ~ ., method = "glm", data = ILtrainPC)
modelFit
View(trainPC)
View(ILtrainPC)
rm(trainPC)
prProcIL <- preProcess(log((ILadData[,-1]) +1), method = "pca", pcaComp = 12)
ILtrainPC <- predict(prProcIL, log((ILadData[,-1])+1))
modelFit <- train(ILadData$diagnosis ~ ., method = "glm", data = ILtrainPC)
prProcIL <- preProcess(log((ILadData[,-1]) +1), method = "pca", pcaComp = 2)
pairs(ILadData)
modelFit1 <- train(ILadData$diagnosis ~ .,method="glm",preProcess="pca",data=ILadData)
confusionMatrix(testing$diagnosis,predict(modelFit1,testing))
prProcIL <- preProcess((ILadData[,-1]), method = "pca", pcaComp = 2)
ILtrainPC <- predict(prProcIL, (ILadData[,-1]))
modelFit <- train(ILadData$diagnosis ~ ., method = "glm", data = ILadData)
modelFit1 <- train(ILadData$diagnosis ~ .,method="glm",preProcess="pca",data=ILadData)
confusionMatrix(testing$diagnosis,predict(modelFit1,testing))
ILtrainPC <- predict(prProcIL, (ILadData[,-1]))
modelFit <- train(ILadData$diagnosis ~ ., method = "glm", data = ILtrainPC)
modelFit1 <- train(ILadData$diagnosis ~ .,method="glm",preProcess="pca",data=ILtrainPC)
confusionMatrix(testing$diagnosis,predict(modelFit1,testing))
str(prProcIL)
modelFit <- train(ILadData$diagnosis ~ ., method = "glm", data = ILtrainPC)
modelFit1 <- train(ILadData$diagnosis ~ .,method="glm",preProcess="pca",data=ILtrainPC)
modelFit
modelFit1
confusionMatrix(testing$diagnosis,predict(modelFit1,testing))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
ILadData <- training[,c("diagnosis", "IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3",
"IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7", "IL_8")]
pairs(ILadData)
ILadDataLog <- training[,c("diagnosis", "IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3",
"IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7", "IL_8")]
pairs(ILadDataLog)
prCompnoLog <-  prcomp(log10(ILadData[,-1]+1))
prComp <- prcomp((ILadData[,-1]))
prCompnoLog <-  prcomp(log10(ILadDataLog[,-1]+1))
prComp
prCompnoLog <-  prcomp(log10(ILadDataLog[,-1]+1))
View(ILadDataLog)
View(ILadData)
prCompnoLog <-  prcomp(log10(ILadDataLog[,-1]+1))
str(ILadDataLog)
View(ILadDataLog)
plot(prComp)
summary(prComp)
prProcIL <- preProcess((ILadData[,-1]), method = "pca", pcaComp = 2)
summary(prProcIL)
prProcIL
prProcIL$ranges
prProcIL$rotation
prProcIL <- preProcess((ILadData[,-1]), method = "pca")
summary(prProcIL)
prProcIL$rotation
prProcILog <- preProcess(log((ILadDataLog[,-1]) +1), method = "pca", pcaComp = 2)
prProcILog <- preProcess(log((ILadDataLog[,-1]) +1), method = "pca")
ILtrainPC <- predict(prProcIL, (ILadData[,-1]))
Summary(ILtrainPC)
summary(ILtrainPC)
prProcILog <- preProcess(log((ILadDataLog[,-1]) +1), method = "pca")
prProcILog <- preProcess(log10((ILadDataLog[,-1]) +1), method = "pca")
plot(prComp)
biplot(prComp)
screeplot(prComp)
plot(prComp)
summary(prProcIL)
summary(prComp)   # PC1-3 = .811 of variation
ILtrainPC <- predict((ILadData[,-1]))
summary(ILtrainPC)
modelFit <- train(ILadData$diagnosis ~ ., method = "glm", data = ILtrainPC)
summary(modelFit)
confusionMatrix(ILadData$diagnosis,predict(modelFit,ILadData))
modelFit
summary(prProcIL)
prProcIL$rotation          # ANSWER: 10 principal components:
ILtrainPC <- predict(prProcIL, (ILadData[,-1]))
ILtrainPC
summary(ILtrainPC)
modelFit1 <- train(ILadData$diagnosis ~ .,method="glm",preProcess="pca",data=ILtrainPC)
ModelFit1
modelFit1 <- train(ILadData$diagnosis ~ .,method="glm",preProcess="pca",data=ILtrainPC)
ModelFit1
modelFit1
summary(modelFit1)
confusionMatrix(testing$diagnosis,predict(modelFit1,testing))
ILadData <- testing[,c("diagnosis", "IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3",
"IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7", "IL_8")]
ILadtestData <- testing[,c("diagnosis", "IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3",
"IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7", "IL_8")]
ILadData <- training[,c("diagnosis", "IL_11", "IL_13", "IL_16", "IL_17E", "IL_1alpha", "IL_3",
"IL_4", "IL_5", "IL_6", "IL_6_Receptor", "IL_7", "IL_8")]
ILtestPC <- predict(prProcIL, (ILadData[,-1]))
ILtestPC <- predict(prProcIL, (ILadData[,-1]))
summary(ILtestPC)
confusionMatrix(testing$diagnosis,predict(modelFit1,ILtestPC))
View(ILtestPC)
ILtestPC <- predict(prProcIL, (ILadtestData[,-1]))
summary(ILtestPC)
confusionMatrix(testing$diagnosis,predict(modelFit1,ILtestPC))
prProcIL0 <- preProcess((ILadData[,-1]))
ILtrainPC <- predict(prProcIL0, (ILadData[,-1]))
summary(ILtrainPC)
modelFit <- train(ILadData$diagnosis ~ ., method = "glm", data = ILtrainPC)
summary(modelFit)
modelFit
ILtestPC0 <- predict(prProcIL0, (ILadtestData[,-1]))
confusionMatrix(ILadtestData$diagnosis,predict(modelFit1,ILtestPC))
ILtestPC0 <- predict(prProcIL0, (ILadtestData[,-1]))
summary(ILtestAI)
ILtestAI <- predict(prProcIL0, (ILadtestData[,-1]))
summary(ILtestAI)
confusionMatrix(ILadtestData$diagnosis,predict(modelFit,ILtestAI))
setwd("~/Training/JohnsHopkins/PracticalMachineLearning/Project/HAR_Exercise_Prediction")
training <- read.csv( "./data/pml-training.csv")
head(training)
testing <- read.csv("./data/pml-testing.csv")
str(training)
str(testing)
View(training)
dim(training)
library(caret);
install.packages("caret")
library(caret);
set.seed(10001)
preObj <- preProcess(training[,-160], method=c("center", "scale"))
summary(training)
preObj <- preProcess(training[,-160],na.remove = TRUE, method=c("center", "scale"))
trainingsum = summary(training)
str(training)
str(training, list.len = 160)
trainingsum
View(training)
answers = rep("A", 20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
pwd
pwd()
setwd("~/Training/JohnsHopkins/PracticalMachineLearning/Project/HAR_Exercise_Prediction")
getwd()
TrainingCln <- training
TrainingCln[ TrainingCLN == '' | TrainingCln == 'NA'] <- NA
TrainingCln[ TrainingCln == '' | TrainingCln == 'NA'] <- NA
indx <-which(colSums(is.na(TrainingCln))!=0)
TrainingCln<-TrainingCln[, -indx]
TrainingCln<-TrainingCln[,-(1:7)]
View(TrainingCln)
inTrain <- createDataPartition(y=TrainingCln$classe, p=0.75, list=FALSE)
validation1 <- training[-inTrain,]
training1 <- training[inTrain,]
dim(validation1) ; dim(training1)
set.seed(10001)
preObj <- preProcess(training[,-160],na.remove = TRUE, method=c("center", "scale"))
inTrain <- createDataPartition(y=TrainingCln$classe, p=0.75, list=FALSE)
validation1 <- TrainingCln[-inTrain,]
training1 <- TrainingCln[inTrain,]
dim(validation1) ; dim(training1)
View(validation1)
preObj <- preProcess(training1[,-53],na.remove = TRUE, method=c("center", "scale"))
Modelfit1 <- train(classe ~ ., data=training1, preProcess=c("center", "scale"), method="glm")
indx
View(TrainingCln)
TrainingNoNA[ training == '' | training == 'NA'] <- NA
TrainingNoNA <- training
TrainingNoNA[ training == '' | training == 'NA'] <- NA
View(TrainingNoNA)
NoNAList <-which(colSums(is.na(TrainingNoNA))!=0)
TrainingNoBlank<-TrainingNoNA[, -NoNAList]
TrainingCln <- TrainingNoBlank[,-(1:7)]      #drop 1st 7 attribute columns
inTrain <- createDataPartition(y=TrainingCln$classe, p=0.75, list=FALSE)
validation1 <- TrainingCln[-inTrain,]
training1 <- TrainingCln[inTrain,]
dim(validation1) ; dim(training1)
set.seed(10001)
pairs(training1[,1:10])
plot(training1[,1:10])
pairs(training1[,41:50])
preObj <- preProcess(training1[,-53],na.remove = TRUE, method=c("center", "scale"))
Modelfit1 <- train(classe ~ ., data=training1, preProcess=c("center", "scale"), method="glm")
install.packages("e1071")
library("e1071", lib.loc="~/R/win-library/3.2")
Modelfit1 <- train(classe ~ ., data=training1, preProcess=c("center", "scale"), method="glm")
Modelfit1 <- train(classe ~ ., data=preObj, preProcess=c("center", "scale"), method="glm")
preObj <- preProcess(training1[,-53], method=c("center", "scale"))
Modelfit1 <- train(classe ~ ., data=preObj, preProcess=c("center", "scale"), method="glm")
ModelfitGLM <- train(classe ~ ., data=preObj,  method="glm")
ModelfitGLM <- train(classe ~ ., data=training1,  method="glm")
ModelfitGLM$finalModel
ModelfitRF <- train(classe ~ ., data=training1,  method="rf")
library(randomForest)
ModelfitRF <- train(classe ~ ., data=training1,  method="rf")
library(plyr); library(ipred)
install.packages("ipred")
library(plyr); library(ipred)
TrainControl <- trainControl(method = "cv", number = 5, returnResamp = "all")
ModelTB <- train(classe ~ ., method = "treebag", data = training1, trControl = TrainControl)
detach("package:e1071", unload=TRUE)
library("e1071", lib.loc="~/R/win-library/3.2")
ModelfitRF <- train(classe ~ ., data=training1,  method="rf", tuneLength = 1, ntree = 25)
ModelfitRF$finalModel
ModelfitRF
ResultRF <- predict(ModelfitRF, newdata = validation1)
confusionMatrix(ResultRF, validation1$classe)
'r ncols(training1)'
ncols(training1)
ncol(training1)
TestingNoNA <- testing
TestingNoNA[ Testing == '' | Testing == 'NA'] <- NA
TestingNoNA[ testing == '' | testing == 'NA'] <- NA
TestNoNAList <- which(colSums(is.na(TestingNoNA))!=0)
TestNoNAList <- which(colSums(is.na(TestingNoNA))!=0)
TestingNoBlank <- TestingNoNA[, -TestNoNAList]
TestingCln <- TestingNoBlank[,-(1:7)]      #drop 1st 7 attribute\timestamp columns
Resulttest <- predict(ModelfitRF, newdata = TestingCln)
confusionMatrix(Resulttest, TestingCln$classe)
Resulttest
View(TestingCln)
answers = rep("A", 20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
library("caret", lib.loc="~/R/win-library/3.2")
library("randomForest", lib.loc="~/R/win-library/3.2")
library("plyr", lib.loc="~/R/win-library/3.2")
detach("package:ipred", unload=TRUE)
library("ipred", lib.loc="~/R/win-library/3.2")
ncol(TrainingCln)
library("caret", lib.loc="~/R/win-library/3.2")
set.seed(10001)
TrainControl <- trainControl(method = "cv", number = 5, returnResamp = "all")
ModelfitRF <- train(classe ~ ., data=training1,  method="rf", tuneLength = 1, ntree = 25)
ModelfitRF$finalModel
ModelfitRF$finalModel
ResultRF <- predict(ModelfitRF, newdata = validation1)
confusionMatrix(ResultRF, validation1$classe)
